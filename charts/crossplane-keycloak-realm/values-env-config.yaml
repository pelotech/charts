provider:
  name: od360-sandbox--keycloak-provider
  secretName: od360-sandbox--keycloak-provider-creds

realm:
  name: od360-sandbox
  forProvider:
    defaultSignatureAlgorithm: "RS256"
    loginWithEmailAllowed: true
    resetPasswordAllowed: true

builtinObjects:
  spec:
    # builtinClients: []
    builtinClients:
      - realm-management
      - account
    builtinRealmRoles: []
    builtinAuthenticationFlows: []

clients:
  oidc:
    - name: "{{ tpl .Values.realm.name $ }}--opendash360-public"
      forProvider:
        accessType: "PUBLIC"
        clientId: opendash360-public
        description: "OpenDash360 client opendash360-public"
        directAccessGrantsEnabled: true
        enabled: true
        validRedirectUris: ["*"]
        standardFlowEnabled: true
        webOrigins: ["*"]
      scope:
        name: "{{ tpl .Values.realm.name $ }}--od360"
        forProvider:
          name: od360
          includeInTokenScope: true
        mappers:
          - name: "{{ tpl .Values.realm.name $ }}--orgpath"
            forProvider:
              name: orgpath
              config:
                access.token.claim: "true"
                aggregate.attrs: "false"
                claim.name: "od360.orgpath"
                id.token.claim: "true"
                jsonType.label: "String"
                multivalued: "false"
                user.attribute: "orgPath"
                userinfo.token.claim: "true"
          - name: "{{ tpl .Values.realm.name $ }}--ltabyuser"
            forProvider:
              name: ltabyuser
              config:
                access.token.claim: "true"
                aggregate.attrs: "false"
                claim.name: "od360.ltaByUser"
                id.token.claim: "true"
                jsonType.label: "String"
                multivalued: "false"
                user.attribute: "ltaByUser"
                userinfo.token.claim: "true"
          - name: "{{ tpl .Values.realm.name $ }}--ltabyuser"
            forProvider:
              name: ltabyuser
              config:
                access.token.claim: "true"
                aggregate.attrs: "false"
                claim.name: "od360.ltaByUser"
                id.token.claim: "true"
                jsonType.label: "String"
                multivalued: "false"
                user.attribute: "ltaByUser"
                userinfo.token.claim: "true"

      defaultScope:
        name: "{{ tpl .Values.realm.name $ }}--opendash360-public"
        forProvider:
          defaultScopes:
            - od360
            - roles
            - web-origins
            - profile
            - acr
            - email
            - basic

roles:
  - name: "{{ .Values.realm.name }}--administrator"
    forProvider:
      name: Administrator
      description: "Administrator role"
      compositeRolesRefs:
        - name: "builtin-{{ .Values.realm.name }}-create-client"
        - name: "builtin-{{ .Values.realm.name }}-impersonation"
        - name: "builtin-{{ .Values.realm.name }}-manage-authorization"
        - name: "builtin-{{ .Values.realm.name }}-manage-clients"
        - name: "builtin-{{ .Values.realm.name }}-manage-events"
        - name: "builtin-{{ .Values.realm.name }}-manage-identity-providers"
        - name: "builtin-{{ .Values.realm.name }}-manage-users"
        - name: "builtin-{{ .Values.realm.name }}-query-clients"
        - name: "builtin-{{ .Values.realm.name }}-query-groups"
        - name: "builtin-{{ .Values.realm.name }}-query-realms"
        - name: "builtin-{{ .Values.realm.name }}-query-users"
        - name: "builtin-{{ .Values.realm.name }}-realm-admin"
        - name: "builtin-{{ .Values.realm.name }}-view-authorization"
        - name: "builtin-{{ .Values.realm.name }}-view-clients"
        - name: "builtin-{{ .Values.realm.name }}-view-events"
        - name: "builtin-{{ .Values.realm.name }}-view-identity-providers"
        - name: "builtin-{{ .Values.realm.name }}-view-realm"
        - name: "builtin-{{ .Values.realm.name }}-view-users"
        - name: "builtin-{{ .Values.realm.name }}-delete-account"
        - name: "builtin-{{ .Values.realm.name }}-manage-account"
        - name: "builtin-{{ .Values.realm.name }}-manage-account-links"
        - name: "builtin-{{ .Values.realm.name }}-manage-consent"
        - name: "builtin-{{ .Values.realm.name }}-view-applications"
        - name: "builtin-{{ .Values.realm.name }}-view-consent"
        - name: "builtin-{{ .Values.realm.name }}-view-groups"
        - name: "builtin-{{ .Values.realm.name }}-view-profile"
  - name: "{{ .Values.realm.name }}--approved"
    forProvider:
      name: Approved
      description: "Identifies approved users"
  - name: "{{ .Values.realm.name }}--opendash-admins"
    forProvider:
      name: opendash_admins
      description: "newer Administrator role"
      compositeRolesRefs:
        - name: "builtin-{{ .Values.realm.name }}-create-client"
        - name: "builtin-{{ .Values.realm.name }}-impersonation"
        - name: "builtin-{{ .Values.realm.name }}-manage-authorization"
        - name: "builtin-{{ .Values.realm.name }}-manage-clients"
        - name: "builtin-{{ .Values.realm.name }}-manage-events"
        - name: "builtin-{{ .Values.realm.name }}-manage-identity-providers"
        - name: "builtin-{{ .Values.realm.name }}-manage-users"
        - name: "builtin-{{ .Values.realm.name }}-query-clients"
        - name: "builtin-{{ .Values.realm.name }}-query-groups"
        - name: "builtin-{{ .Values.realm.name }}-query-realms"
        - name: "builtin-{{ .Values.realm.name }}-query-users"
        - name: "builtin-{{ .Values.realm.name }}-realm-admin"
        - name: "builtin-{{ .Values.realm.name }}-view-authorization"
        - name: "builtin-{{ .Values.realm.name }}-view-clients"
        - name: "builtin-{{ .Values.realm.name }}-view-events"
        - name: "builtin-{{ .Values.realm.name }}-view-identity-providers"
        - name: "builtin-{{ .Values.realm.name }}-view-realm"
        - name: "builtin-{{ .Values.realm.name }}-view-users"
        - name: "builtin-{{ .Values.realm.name }}-delete-account"
        - name: "builtin-{{ .Values.realm.name }}-manage-account"
        - name: "builtin-{{ .Values.realm.name }}-manage-account-links"
        - name: "builtin-{{ .Values.realm.name }}-manage-consent"
        - name: "builtin-{{ .Values.realm.name }}-view-applications"
        - name: "builtin-{{ .Values.realm.name }}-view-consent"
        - name: "builtin-{{ .Values.realm.name }}-view-groups"
        - name: "builtin-{{ .Values.realm.name }}-view-profile"
  - name: "{{ .Values.realm.name }}--opendash-assessor"
    forProvider:
      name: opendash_assessor
      description: "Assessor Role"
  - name: "{{ .Values.realm.name }}--opendash-lms-admins"
    forProvider:
      name: opendash_lms_admins
      description: "LMS Role"
  - name: "{{ .Values.realm.name }}--opendash-quiz-author"
    forProvider:
      name: opendash_quiz_author
      description: "Quiz Author Role"
  - name: "{{ .Values.realm.name }}--opendash-resource-manager"
    forProvider:
      name: opendash_resource_manager
      description: "Opendash Resource Manager"
  - name: "{{ .Values.realm.name }}--opendash-training-certifier"
    forProvider:
      name: opendash_training_certifier
      description: "Training Certifier role"
  - name: "{{ .Values.realm.name }}--opendash-workforce-manager"
    forProvider:
      name: opendash_workforce_manager
      description: "Workforce manager role"
  - name: "{{ .Values.realm.name }}--opendash-integration"
    forProvider:
      name: opendash_integration
      description: "Role for use by external partners"

userFederation:
  ldap:
    enabled: true
    forProvider:
      connectionUrl: "ldap://{{ tpl .Values.realm.name $ }}-freeipa"
      bind:
        credentialSecretRef:
          namespace: "{{ tpl .Values.realm.name $ }}"
          name: keycloak-ldap-bind-creds
          key: KEYCLOAK_LDAP_BIND_PASSWORD
        user: sso.svc
        dn: 'uid={{ .Values.userFederation.ldap.forProvider.bind.user }},cn=users,cn=accounts,{{ printf "ldap.suffix" }}'
      rdnLdapAttribute: "uid"
      userObjectClasses:
        - top
        - person
        - organizationalperson
        - inetorgperson
        - posixaccount
        - inetuser
        - krbprincipalaux
        - krbticketpolicyaux
        - ipaobject
        - ipasshuser
        - mtouser
        - ipauser
        - ipaSshGroupOfPubKeys
        - mepOriginEntry
        - ipantuserattrs
      usernameLdapAttribute: "uid"
      usersDn: 'cn=users,cn=accounts,{{ printf "$$ldap.suffix" }}'
      uuidLdapAttribute: "uid"
      vendor: "RHDS"

    mappers:
      userAttributeMappers:
        - name: "{{ .Values.realm.name }}--freeipa-givenname"
          forProvider:
            name: "firstName <-> givenName"
            ldapAttribute: "givenName"
            userModelAttribute: "firstName"
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-orgpath"
          forProvider:
            name: "orgpath"
            ldapAttribute: "orgpath"
            userModelAttribute: "orgPath"
            isBinaryAttribute: false
        - name: "{{ .Values.realm.name }}--freeipa-krbprincipal"
          forProvider:
            name: "krbPrincipalName"
            ldapAttribute: "krbPrincipalName"
            userModelAttribute: "email"
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-creationdate"
          forProvider:
            name: "create timestamp"
            ldapAttribute: "createTimestamp"
            userModelAttribute: "createTimestamp"
            isBinaryAttribute: false
            isMandatoryInLdap: false
        - name: "{{ .Values.realm.name }}--freeipa-email"
          forProvider:
            name: "email"
            ldapAttribute: "mail"
            userModelAttribute: "email"
            alwaysReadValueFromLdap: true
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-firstname"
          forProvider:
            name: "first name"
            ldapAttribute: "cn"
            userModelAttribute: "firstName"
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-lastname"
          forProvider:
            name: "last name"
            ldapAttribute: "sn"
            userModelAttribute: "lastName"
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-modifydate"
          forProvider:
            name: "modify date"
            ldapAttribute: "modifyTimestamp"
            userModelAttribute: "modifyTimestamp"
            isBinaryAttribute: false
            isMandatoryInLdap: false
        - name: "{{ .Values.realm.name }}--freeipa-username"
          forProvider:
            name: "username"
            ldapAttribute: "uid"
            userModelAttribute: "username"
            isBinaryAttribute: false
            isMandatoryInLdap: true
        - name: "{{ .Values.realm.name }}--freeipa-ltabyuser"
          forProvider:
            name: "ltabyuser"
            ldapAttribute: "ltabyuser"
            userModelAttribute: "ltaByUser"
            alwaysReadValueFromLdap: true
            isBinaryAttribute: false
            isMandatoryInLdap: false
        - name: "{{ .Values.realm.name }}--freeipa-sponsoredbyuser"
          forProvider:
            name: "sponsoredbyuser"
            ldapAttribute: "sponsoredbyuser"
            userModelAttribute: "sponsoredByUser"
            alwaysReadValueFromLdap: true
            isBinaryAttribute: false
            isMandatoryInLdap: false

      hardcodedAttributeMappers:
        - name: "{{ .Values.realm.name }}--freeipa-gidnumber"
          forProvider:
            name: "hardcode-gidNumber"
            attributeName: "gidNumber"
            attributeValue: "99999999"
        - name: "{{ .Values.realm.name }}--freeipa-ipantsecurity"
          forProvider:
            name: "hardcode-ipantsecurityidentifier"
            attributeName: "ipantsecurityidentifier"
            attributeValue: "JUNK_VALUE"
        - name: "{{ .Values.realm.name }}--freeipa-homedirectory"
          forProvider:
            name: "hardcode-homeDirectory"
            attributeName: "homeDirectory"
            attributeValue: "/home/temp"
        - name: "{{ .Values.realm.name }}--freeipa-uidnumber"
          forProvider:
            name: "hardcode-uidNumber"
            attributeName: "uidNumber"
            attributeValue: "99999999"

users:
  - username: emmanuel.gomez
    email: emmanuel@pelo.tech
