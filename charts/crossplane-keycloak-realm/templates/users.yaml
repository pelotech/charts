{{- $providerConfigName := tpl .Values.providerConfig.name $ | required ".Values.providerConfig.name is required" }}
{{- $realmName := tpl .Values.realm.name $ | required ".Values.realm.name is required" }}
{{- $realmResourceName := printf "%s--realm" $realmName }}
{{- $realmNamespace := .Release.Namespace }}

{{- range $user := .Values.users }}

{{- $tmp := $user.forProvider.username | required "$user.forProvider.username is required" }}
{{- $safeShortUserName := $user.forProvider.username | replace "." "-" }}
{{- $userResourceName := printf "%s--%s" $realmName $safeShortUserName }}
{{- $tmp2 := $user.forProvider.email | required (printf "$user.forProvider.%s.email is required" $safeShortUserName) }}

---
apiVersion: user.keycloak.m.crossplane.io/v1alpha1
kind: User
metadata:
  name: "{{ $userResourceName }}"
  namespace: "{{ $realmNamespace }}"
spec:
  providerConfigRef:
    name: "{{ $providerConfigName }}"
    kind: ProviderConfig
  forProvider:
    realmIdRef:
      name: "{{ $realmResourceName }}"
      namespace: "{{ $realmNamespace }}"
    {{- tpl ($user.forProvider | toYaml) $ | nindent 4 }}

{{- $hasNames := and $user.roles (gt (len ($user.roles.names | default (list))) 0) }}
{{- $hasOverrides := and $user.roles $user.roles.forProvider }}
{{- if or $hasNames $hasOverrides }}
---
apiVersion: user.keycloak.m.crossplane.io/v1alpha1
kind: Roles
metadata:
  name: "{{ $userResourceName }}--roles"
  namespace: "{{ $realmNamespace }}"
spec:
  forProvider:
    realmIdRef:
      name: "{{ $realmResourceName }}"
    userIdRef:
      name: "{{ $userResourceName }}"
    roleIdsRefs:
{{- range ($user.roles.names | default (list)) }}
      - name:  {{ tpl . $ | quote }}
{{- end }}
{{- if $hasOverrides }}
{{ tpl ($user.roles.forProvider | toYaml) $ | nindent 4 }}
{{- end }}
{{- end }}
{{- end }}
